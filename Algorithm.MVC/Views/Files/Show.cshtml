
@{
    ViewBag.Title = "Show";
}
@model List<FileData>


<style>
    .asd {
        display: inline-block;
        /*left: 10%;*/
        padding-top: 25%;
    }

    .bsd {
        left: 7%;
    }
</style>



<h2>Show</h2>

<div class="tab-pane active" id="home">
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'zoom';">Zoom </button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'orbit'">orbit </button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'pan'">pan </button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'free-orbit'">free-orbit </button>

    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('front'); viewer2.show('front');">Front</button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('back');  viewer2.show('back');">Back</button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('top');   viewer2.show('top');">Top</button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('bottom');viewer2.show('bottom');">Bottom</button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('left');  viewer2.show('left');">Left</button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('right'); viewer2.show('right');">Right</button>
    @*<button type="button" class="btn btn-primary" onclick="if (viewer) viewer.setCameraPosition([50, 50, 50]); viewer2.setCameraPosition([50, 50, 50]);">3D</button>*@
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.zoomTo(); viewer2.zoomTo();">3D</button>

    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.clip()  ">clip </button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.unclip()  ">Unclip </button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.setStyle(colorsEnum.red, xProductType.IFCWALLSTANDARDCASE)">Color Beams</button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.resetStyles(xProductType.IFCWALLSTANDARDCASE)">reset Beams color</button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.setState(xState.HIGHLIGHTED,xProductType.IFCWALLSTANDARDCASE)">Highlight Beams</button>
    <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.setState(xState.XRAYVISIBLE,xProductType.IFCWALLSTANDARDCASE)">xray visible Beams</button>
    <button type="button" class="btn btn-primary" id="asdasd">Rotate</button>
    <button type="button" class="btn btn-primary" onclick="Recolour()">Recolour by type</button>
    <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.resetStyles();">Reset styles</button>

</div>



<div id="content" class="container">
    <div class="row">
    </div>
    <div class="col-md-3 asd">
        <canvas id="viewer-Archeticture" width="350" height="200"></canvas>
    </div>
    <div class="col-md-6 bsd">
        <canvas id="viewer-structure" width="800" height="500"></canvas>
    </div>
</div>

<script>

        var viewer = new xViewer('viewer-structure');
        var viewer2 = new xViewer('viewer-Archeticture');

        colorsEnum = Object.freeze({ 'red': 0, 'blue': 1 });

        viewer.background = [0, 0, 0, 0];
        viewer2.background = [0, 0, 0, 0];

        viewer.renderingMode = "normal";
        viewer2.renderingMode = "normal";

        viewer.defineStyle(0, [255, 0, 0, 255]);
        viewer2.defineStyle(0, [255, 0, 0, 255]);

        var pickFunc = function (arg) {

            viewer.setState(xState.HIGHLIGHTED, [arg.id]);
            viewer2.setState(xState.HIGHLIGHTED, [arg.id]);
            //document.getElementById("productId").value = arg.id;

        }

        //viewer.on('loaded', function () { viewer.background = [255, 255, 255, 255] })
        viewer.on('pick', pickFunc);
            viewer.on('dblclick', function (arg) { viewer.zoomTo(arg.id); viewer2.zoomTo(arg.id); })



        viewer.on("loaded", function () {
            var shouldRotate = true;

            function rotate() {
                viewer2.setCameraPosition(viewer.getCameraPosition());

                if (!shouldRotate) {
                    return;
                }

                var origin = viewer._origin;
                var origin2 = viewer2._origin;

                var camera = viewer.getCameraPosition();
                var camera2 = viewer2.getCameraPosition();

                //get origin coordinates in view space
                var mvOrigin = vec3.transformMat4(vec3.create(), origin, viewer._mvMatrix)
                var mvOrigin2 = vec3.transformMat4(vec3.create(), origin2, viewer2._mvMatrix)

                //movement factor needs to be dependant on the distance but one meter is a minimum so that movement wouldn't stop when camera is in 0 distance from navigation origin
                var distanceVec = vec3.subtract(vec3.create(), origin, camera);
                var distance = Math.max(vec3.length(distanceVec), viewer._handles[0]._model.meter);

                var distanceVec2 = vec3.subtract(vec3.create(), origin2, camera2);
                var distance2 = Math.max(vec3.length(distanceVec2), viewer2._handles[0]._model.meter);

                //move to the navigation origin in view space
                var transform = mat4.translate(mat4.create(), mat4.create(), mvOrigin)
                var transform2 = mat4.translate(mat4.create(), mat4.create(), mvOrigin2)

                //z rotation around model z axis
                var mvZ = vec3.transformMat3(vec3.create(), [0, 0, 1], mat3.fromMat4(mat3.create(), viewer._mvMatrix));
                mvZ = vec3.normalize(vec3.create(), mvZ);
                transform = mat4.rotate(mat4.create(), transform, Math.PI / 700.0, mvZ);

                var mvZ2 = vec3.transformMat3(vec3.create(), [0, 0, 1], mat3.fromMat4(mat3.create(), viewer2._mvMatrix));
                mvZ2 = vec3.normalize(vec3.create(), mvZ2);
                transform2 = mat4.rotate(mat4.create(), transform2, Math.PI / 700.0, mvZ2);
                //reverse the translation in view space and leave only navigation changes
                var translation = vec3.negate(vec3.create(), mvOrigin);
                transform = mat4.translate(mat4.create(), transform, translation);

                var translation2 = vec3.negate(vec3.create(), mvOrigin2);
                transform2 = mat4.translate(mat4.create(), transform2, translation2);

                //apply transformation in right order
                viewer._mvMatrix = mat4.multiply(mat4.create(), transform, viewer._mvMatrix);

                viewer2._mvMatrix = mat4.multiply(mat4.create(), transform2, viewer2._mvMatrix);
            }
            $("#viewer-Archeticture").mousedown(function () { shouldRotate = false; });
            $("#viewer-structure").mousedown(function () { shouldRotate = false; });
            $(":button").mousedown(function () { shouldRotate = false; });
            $("#asdasd").mousedown(function () { shouldRotate = true; });
            setInterval(rotate, 20);
        });

        viewer2.on('pick', function (args) {
            var id = args.id;
            viewer.setState(xState.HIDDEN, [args.id]);
            viewer2.setState(xState.HIDDEN, [args.id]);
            //var span = document.getElementById('productId');
            //if (span) {
            //    span.innerHTML = id ? id : 'model';
            //}

        });


        function SubmitData() {
            var pId = $("#productId")[0].value;
            var newX = $("#newX")[0].value;
            var newY = $("#newY")[0].value;
            $.get("ModifyProducts.aspx?Id=" + pId + "&newX=" + newX + "&newY=" + newY).done(function (data) {
                alert('done');
                viewer.setState(xState.UNDEFINED, [parseInt(pId)]);
                viewer.setStyle(0, [parseInt(pId)]);
            });
        }

        function UnRegister() {
            viewer.off('pick', func);
        }

        //Reclour the elemnts by type
        function Recolour() {
            if (!viewer) return;
            var index = 0;
            for (var i in xProductType) {
                var type = xProductType[i];
                var colour = [Math.random() * 255, Math.random() * 255, Math.random() * 255, 255];
                viewer.defineStyle(index, colour);
                viewer.setStyle(index, type);
                index++;
            }
        };

        //Add Navigation Cube


        //Load Architecture and Structure Models and start the viewers
        viewer2.load('@Url.Action("Viewer", "Files",new {FileName= Model[1].FileName })');
    viewer.load('@Url.Action("Viewer", "Files",new {FileName= Model[0].FileName })');

    //var navCube = new xNavigationCube();
    //navCube.ratio = .1;
    //viewer.addPlugin(navCube);


        viewer.start();
    viewer2.start();

</script>

@section scripts{
    <script src="~/Scripts/xbim-viewer.debug.bundle.js"></script>
}

