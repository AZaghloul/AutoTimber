
@{
    ViewBag.Title = "Show";
    Layout = null;
}
@model FileData


<style>
    .asd {
        display: inline-block;
        /*left: 10%;*/
        padding-top: 25%;
    }

    .bsd {
        left: 7%;
    }
</style>

<div class="panel panel-default" style="margin-bottom:30px;">
    <div class="panel-heading" style="padding:0px 0px;">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
            <li class="active"><a href="#OnClick" role="tab" data-toggle="tab">On Click</a></li>
            <li><a href="#View" role="tab" data-toggle="tab">View</a></li>
            <li><a href="#Clip" role="tab" data-toggle="tab">Clip</a></li>
            <li><a href="#Colors" role="tab" data-toggle="tab">Colors</a></li>
        </ul>

    </div>
    <!-- Tab panes + Panel body -->
    <div class="panel-body tab-content" style="padding:0px;">
        <div class="tab-pane active" id="OnClick">
            <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'zoom';">Zoom </button>
            <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'orbit'">orbit </button>
            <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'pan'">pan </button>
            <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.navigationMode = 'free-orbit'">free-orbit </button>
            <select id="cmbHide" class="selectpicker btn btn-primary">
                <option value="noAction">No action</option>
                <option value="hideProduct">Hide product</option>
                <option value="hideType">Hide type</option>
                <option value="highlight">Highlight</option>
            </select>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.resetStates(); viewer2.resetStates();">Show all</button>

        </div>
        <div class="tab-pane" id="View">
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('front'); viewer2.show('front');">Front</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('back');  viewer2.show('back');">Back</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('top');   viewer2.show('top');">Top</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('bottom');viewer2.show('bottom');">Bottom</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('left');  viewer2.show('left');">Left</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.show('right'); viewer2.show('right');">Right</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.setCameraPosition([50, 50, 50]); viewer2.setCameraPosition([50, 50, 50]); viewer.zoomTo(); viewer2.zoomTo();">3D</button>
            <button type="button" class="btn btn-primary" id="asdasd">Rotate</button>
        </div>
        <div class="tab-pane" id="Clip">
            <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.clip()  ">clip </button>
            <button type="button" class="btn btn-primary" onclick="if(viewer) viewer.unclip()  ">Unclip </button>
        </div>

        <div class="tab-pane" id="Colors">
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.setStyle(0, xProductType.IFCCOLUMNSTANDARDCASE);">Color Studs</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.setStyle(1, xProductType.IFCBEAMSTANDARDCASE)">Color Joits</button>
            <button type="button" class="btn btn-primary" onclick="Recolour()">Recolour by type</button>
            <button type="button" class="btn btn-primary" onclick="if (viewer) viewer.resetStates(); viewer2.resetStates();">Reset styles</button>
        </div>

    </div>
</div>


<div class="tab-pane active" id="home">



</div>



@*<div id="content" class="container">
    <div class="row">

        <div class="col-md-3 ">
        </div>
        <div class="col-md-6 ">
        </div>
    </div>
</div>*@


<div class="panel-container">

    <div class="panel-left">
        <canvas id="viewer-Archeticture" min-width="50" min-height="20"></canvas>

    </div>

    <div class="splitter">
    </div>

    <div class="panel-right">
        <canvas id="viewer-structure" width="800" height="500"></canvas>
    </div>
</div>
<style>
    .panel-container {
        display: flex;
        flex-direction: row;
        border: 1px solid silver;
        overflow: hidden;
        /* avoid browser level touch actions */
        xtouch-action: none;
    }

    .panel-left {
        flex: 0 0 auto;
        /* only manually resize */
        padding: 10px;
        width: 370px;
        min-height: 220px;
        min-width: 0px;
        white-space: nowrap;
        background: #838383;
        color: white;
    }

    .splitter {
        flex: 0 0 auto;
        width: 18px;
        background: url(https://raw.githubusercontent.com/RickStrahl/jquery-resizable/master/assets/vsizegrip.png) center center no-repeat #535353;
        min-height: 200px;
        cursor: col-resize;
    }

    .panel-right {
        flex: 1 1 auto;
        /* resizable */
        padding: 10px;
        width: 100%;
        min-height: 200px;
        min-width: 200px;
        background: #eee;
    }
</style>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script src="~/src/Content/jquery-resizable.js"></script>
<script>
    $(".panel-left").resizable({
        handleSelector: ".splitter",
        resizeHeight: false
    });

    $(".panel-top").resizable({
        handleSelector: ".splitter-horizontal",
        resizeWidth: false
    });
</script>

<script>

        var viewer = new xViewer('viewer-structure');
        var viewer2 = new xViewer('viewer-Archeticture');

        colorsEnum = Object.freeze({ 'red': 0, 'blue': 1 });

        viewer.background = [0, 0, 0, 0];
        viewer2.background = [0, 0, 0, 0];

        viewer.renderingMode = "normal";
        viewer2.renderingMode = "normal";

    viewer.defineStyle(0, [255, 0, 0, 255]);
        viewer.defineStyle(1, [0, 0, 255, 255]);
    viewer2.defineStyle(0, [255, 0, 0, 255]);
        viewer2.defineStyle(1, [0, 0, 255, 255]);


            //Load Architecture and Structure Models and start the viewers



        var pickFunc = function (arg) {

            viewer.setState(xState.HIGHLIGHTED, [arg.id]);
            viewer2.setState(xState.HIGHLIGHTED, [arg.id]);
            //document.getElementById("productId").value = arg.id;

        }

        //viewer.on('loaded', function () { viewer.background = [255, 255, 255, 255] })
        viewer.on('pick', pickFunc);
            viewer.on('dblclick', function (arg) { viewer.zoomTo(arg.id); viewer2.zoomTo(arg.id); })



        viewer.on("loaded", function () {
            var shouldRotate = true;

            function rotate() {
                viewer2.setCameraPosition(viewer.getCameraPosition());

                if (!shouldRotate) {
                    return;
                }

                var origin = viewer._origin;
                var origin2 = viewer2._origin;

                var camera = viewer.getCameraPosition();
                var camera2 = viewer2.getCameraPosition();

                //get origin coordinates in view space
                var mvOrigin = vec3.transformMat4(vec3.create(), origin, viewer._mvMatrix)
                var mvOrigin2 = vec3.transformMat4(vec3.create(), origin2, viewer2._mvMatrix)

                //movement factor needs to be dependant on the distance but one meter is a minimum so that movement wouldn't stop when camera is in 0 distance from navigation origin
                var distanceVec = vec3.subtract(vec3.create(), origin, camera);
                var distance = Math.max(vec3.length(distanceVec), viewer._handles[0]._model.meter);

                var distanceVec2 = vec3.subtract(vec3.create(), origin2, camera2);
                var distance2 = Math.max(vec3.length(distanceVec2), viewer2._handles[0]._model.meter);

                //move to the navigation origin in view space
                var transform = mat4.translate(mat4.create(), mat4.create(), mvOrigin)
                var transform2 = mat4.translate(mat4.create(), mat4.create(), mvOrigin2)

                //z rotation around model z axis
                var mvZ = vec3.transformMat3(vec3.create(), [0, 0, 1], mat3.fromMat4(mat3.create(), viewer._mvMatrix));
                mvZ = vec3.normalize(vec3.create(), mvZ);
                transform = mat4.rotate(mat4.create(), transform, Math.PI / 700.0, mvZ);

                var mvZ2 = vec3.transformMat3(vec3.create(), [0, 0, 1], mat3.fromMat4(mat3.create(), viewer2._mvMatrix));
                mvZ2 = vec3.normalize(vec3.create(), mvZ2);
                transform2 = mat4.rotate(mat4.create(), transform2, Math.PI / 700.0, mvZ2);
                //reverse the translation in view space and leave only navigation changes
                var translation = vec3.negate(vec3.create(), mvOrigin);
                transform = mat4.translate(mat4.create(), transform, translation);

                var translation2 = vec3.negate(vec3.create(), mvOrigin2);
                transform2 = mat4.translate(mat4.create(), transform2, translation2);

                //apply transformation in right order
                viewer._mvMatrix = mat4.multiply(mat4.create(), transform, viewer._mvMatrix);

                viewer2._mvMatrix = mat4.multiply(mat4.create(), transform2, viewer2._mvMatrix);
            }
            $("#viewer-Archeticture").mousedown(function () { shouldRotate = false; });
            $("#viewer-structure").mousedown(function () { shouldRotate = false; });
            $(":button").mousedown(function () { shouldRotate = false; });
            $("#asdasd").mousedown(function () { shouldRotate = true; });
            setInterval(rotate, 20);
        });

        viewer2.on('pick', function (args) {
            var id = args.id;
            viewer.setState(xState.HIDDEN, [args.id]);
            viewer2.setState(xState.HIDDEN, [args.id]);
            //var span = document.getElementById('productId');
            //if (span) {
            //    span.innerHTML = id ? id : 'model';
            //}

        });

        viewer.on('pick', function (args) {
            var cmb = document.getElementById('cmbHide');
            var option = cmb.value;
            switch (option) {
                case 'hideProduct':
                    viewer.setState(xState.HIDDEN, [args.id]);
                    break;
                case 'hideType':
                    var type = viewer.getProductType(args.id);
                    viewer.setState(xState.HIDDEN, type);
                    break;
                case 'highlight':
                    viewer.setState(xState.HIGHLIGHTED, [args.id]);
                    break;
                default:
                    break;
            }
        });


        function SubmitData() {
            var pId = $("#productId")[0].value;
            var newX = $("#newX")[0].value;
            var newY = $("#newY")[0].value;
            $.get("ModifyProducts.aspx?Id=" + pId + "&newX=" + newX + "&newY=" + newY).done(function (data) {
                alert('done');
                viewer.setState(xState.UNDEFINED, [parseInt(pId)]);
                viewer.setStyle(0, [parseInt(pId)]);
            });
        }

        function UnRegister() {
            viewer.off('pick', func);
        }

        //Reclour the elemnts by type
        function Recolour() {
            if (!viewer) return;
            var index = 0;
            for (var i in xProductType) {
                var type = xProductType[i];
                var colour = [Math.random() * 255, Math.random() * 255, Math.random() * 255, 255];
                viewer.defineStyle(index, colour);
                viewer2.defineStyle(index, colour);
                viewer.setStyle(index, type);
                viewer2.setStyle(index, type);
                index++;
            }
        };

        //Add Navigation Cube

        viewer.load('@Url.Action("Viewer", "Files",new { FileName=Model.FileName})');


    viewer2.load('@Url.Action("Viewer", "Files",new { FileName = Model.FileName})');




    var navCube = new xNavigationCube();
    navCube.ratio = .1;
    viewer.addPlugin(navCube);


        viewer.start();
    viewer2.start();

</script>



